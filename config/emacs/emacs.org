#+TITLE: Emacs config
#+DESCRIPTION: A literate Emacs config written in Org
#+AUTHOR: Matei Cotocel

* Intro

Emacs is not just a mere text editor. It's a Lisp interpreter with text editing capabilities. This means anything you can think of, Emacs can do. Of course, you have the text editing. But you can also use it as a Git frontend, as an IRC client, as an RSS reader, and so much more. Such is the extensible of Emacs.

In this Org document, you'll find my literate Emacs configuration. I wouldn't advise you to use all of this as your config. Instead, you should add snippets of this document to your personal configuration.

** Why org?

I'm not going to write separate documentation for a configuration file. My config hasn't reached that level yet. However, an Org file allows me to write information /in/ the configuration file itself.
  
* General settings
  
** Small changes

We add the load path for pieces of lisp code, and change the warning level to emergency so we don't get distracted. We also change some defaults.
  
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.config/emacs/lisp/")

  (setq-default
    delete-by-moving-to-trash t ;; Move to trash instead of deleting
    require-final-newline t ;; Auto create a newline at end of file
    custom-safe-themes t ;; Don't ask if theme is safe
    warning-minimum-level :emergency ;; Emacs, honestly, I want you to shut up
    disabled-command-function nil ;; Yes I want to use that command
    vc-follow-symlinks) ;; Follow those damn symlinks!

  (defalias 'yes-or-no-p 'y-or-n-p) ;; Y or N instead of yes or no

#+end_src

** Package config

We setup melpa, use-package, and straight.el for installing package later on. Melpa has a lot more packages than the default elpa. Use-package is pretty /useful/ (pun intended), since packages can be automatically installed and lazy-loaded. Straight.el is for downloading packages from git repos. We also install the package =auto-package-update= to update installed packages.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  (setq use-package-always-ensure t)
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)

  (use-package auto-package-update
     :ensure t
     :config
     (setq auto-package-update-delete-old-versions t
           auto-package-update-interval 4)
     (auto-package-update-maybe))
#+END_SRC

** Git info

We set up our username and email for git.
  
#+BEGIN_SRC emacs-lisp
  (when (equal ""
               (shell-command-to-string "git config user.name"))
    (shell-command "git config --global user.name \"Matei Cotocel\"")
    (shell-command "git config --global user.email \"mcotocel@outlook.com\""))
#+END_SRC

** UI elements

We remove unnecessary UI elements, like the menu bar, scroll bar, and tool bar. These are useless (for me), I don't like them, I don't want them.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen nil
        inhibit-startup-echo-area-message t
        inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Font

*** Normal font

Here we set a nice font, because if I'm going to be staring at code for hours, I want it to look good. Change the font size to whatever works for you.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font-12"))
#+END_SRC

*** Symbol font

We also need to set a symbol font. Here I use Twemoji, since it looks pretty good.

#+BEGIN_SRC emacs-lisp
  (set-fontset-font t 'symbol (font-spec :family "Twemoji") nil 'prepend)
#+END_SRC

** Prettify symbols

This replaces some text with icons. Also ligatures.

#+begin_src emacs-lisp
    (defun org/prettify-set ()
      (interactive)
      (setq prettify-symbols-alist
          '(("#+begin_src" . "")
            ("#+BEGIN_SRC" . "")
            ("#+end_src" . "")
            ("#+END_SRC" . "")
            ("#+begin_example" . "")
            ("#+BEGIN_EXAMPLE" . "")
            ("#+end_example" . "")
            ("#+END_EXAMPLE" . "")
            ("#+results:" . "")
            ("#+RESULTS:" . "")
            ("#+begin_quote" . "❝")
            ("#+BEGIN_QUOTE" . "❝")
            ("#+end_quote" . "❞")
            ("#+END_QUOTE" . "❞")
            ("[ ]" . "☐")
            ("[-]" . "◯")
            ("[X]" . "☑"))))
    (add-hook 'org-mode-hook 'org/prettify-set)

    (defun prog/prettify-set ()
      (interactive)
      (setq prettify-symbols-alist
          '(("lambda" . "λ")
            ("->" . "→")
            ("<-" . "←")
            ("<=" . "≤")
            (">=" . "≥")
            ("!=" . "≠")
            ("~=" . "≃")
            ("=~" . "≃"))))
    (add-hook 'prog-mode-hook 'prog/prettify-set)

  (global-prettify-symbols-mode)

#+end_src

** Line numbers

Line numbers are useful. Relative line numbers even more so, since you don't have to do much maths with them (so if I'm on 321, and I want to go to 357, that means I have to... wait no that's not right... etc).

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

Sometimes line numbers can be distracting, so we disable them for certain modes.

#+BEGIN_SRC emacs-lisp
  (dolist (mode '(org-mode-hook
    term-mode-hook
    eshell-mode-hook
    neotree-mode-hook
    elfeed-show-mode-hook
    circe-channel-mode-hook
    circe-chat-mode-hook
    doc-view-mode-hook
    xwidget-webkit-mode-hook
    woman-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** File locations

To keep thing organized, we set the locations of different files here.

#+BEGIN_SRC emacs-lisp
  (setq recentf-save-file "~/.config/emacs/etc/recentf" ;; File for recentf
        recentf-max-saved-items 50)
  (setq savehist-file "~/.config/emacs/etc/savehist" ;; File for save history
        history-length 150)
  (setq save-place-file "~/.config/emacs/etc/saveplace") ;; File for save place
  (setq bookmark-default-file "~/.config/emacs/etc/bookmarks") ;; File for bookmarks
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")) ;; Directory for backups
        delete-old-versions t
        kept-old-versions 20
        vc-make-backup-files t
        version-control t)
  (setq custom-file "~/.config/emacs/etc/custom.el") ;; For saved customizations
  (setq create-lockfiles nil) ;; Disable lockfiles
#+END_SRC

** Miscellaneous minor modes 

These are some useful minor modes that I tend to use.

#+BEGIN_SRC emacs-lisp
  (save-place-mode) ;; Save location
  (global-visual-line-mode) ;; Wrap lines
  (recentf-mode) ;; Recent files
  (add-hook 'org-mode-hook 'flyspell-mode) ;; Spell checker
#+END_SRC

** Indentation

Here we configure indentation. I prefer using tabs, but I convert them to spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
      tab-width 4)
  (setq indent-line-function 'insert-tab)
#+END_SRC

* Package settings

** Path
  
First we install a package to set the path for macOS, since for some reason it doesn't work out of the box.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
     :config
     (exec-path-from-shell-initialize))
#+END_SRC

** Evil keybindings

Here we install and configure evil, since I /cannot/ use the default Emacs keys. Evil is the only way I've managed to move to Emacs. The Vim key bindings are a /lot/ better than the Emacs keybindings. Evil-collection is for miscellaneous minor modes, evil-org for org mode, and evil-leader adds a leader key.

*** Base

This is the main evil package, that allows you to use vim keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

*** Collection

This package adds vim keybindings for miscellaneous minor modes, such as dired and mu4e.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

*** Org

For some reason evil-collection doesn't include org bindings, so we install another package.

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
*** Leader

This adds a leader key to Emacs, which is /incredibly/ useful.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      ;; General
      ".f" 'consult-isearch
      ".q" 'delete-frame
      ".e" 'eval-region
      ".s" 'straight-use-package
      ;; Undo
      "uv" 'undo-tree-visualize
      "uu" 'undo-tree-undo
      "ur" 'undo-tree-redo
      "uc" 'consult-yank-pop
      ;; Files
      "fr" 'consult-recent-file
      "fb" 'consult-bookmark
      "ff" 'find-file
      ;; Bufffers
      "bv" 'split-window-right
      "bh" 'split-window-below
      "bd" 'kill-current-buffer
      "bb" 'consult-buffer
      "bx" 'switch-to-scratch
      ;; Projectile
      "pa" 'projectile-add-known-project
      "pf" 'projectile-find-file
      "pp" 'projectile-switch-project
      "pg" 'projectile-grep
      "pm" 'projectile-commander
      "pc" 'projectile-compile-project
      ;; Org mode
      "oc" 'org-edit-special
      "ol" 'org-latex-preview
      "ot" 'org-ctrl-c-ctrl-c
      "oi" 'org-toggle-inline-images
      "oa" 'org-agenda
      "os" 'org-schedule
      ; Export
      "oep" 'org-latex-export-to-pdf
      "oeh" 'org-html-export-to-html
      "oem" 'org-man-export-to-man
      ; Roam
      "orf" 'org-roam-node-find
      "ori" 'org-roam-node-insert
      "oru" 'org-roam-db-sync
      "oro" 'orui-open
      ; Babel
      "obs" 'org-babel-execute-src-block
      "obb" 'org-babel-execute-buffer
      "obl" 'org-babel-load-file
      ;; Help
      "hh" 'help
      "hk" 'describe-key
      "hv" 'describe-variable
      "hf" 'describe-function
      "hs" 'describe-symbol
      "hm" 'describe-mode
      ;; Magit
      "gi" 'magit-init
      "gc" 'magit-commit
      "gp" 'magit-push
      "gC" 'magit-clone
      "gs" 'magit-status))
#+END_SRC

*** Additional keybindings

Here I bind some extra keybindings for evil mode.
    
#+BEGIN_SRC emacs-lisp

  (define-key evil-normal-state-map (kbd "M-s") 'save-buffer)
  (define-key evil-normal-state-map (kbd "M-q") 'delete-window)
  (define-key evil-normal-state-map (kbd "M-w") 'kill-current-buffer)

  (define-key evil-normal-state-map (kbd "<C-tab>") 'consult-buffer)

  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "M-j") 'evil-scroll-down)
  (define-key evil-normal-state-map (kbd "M-k") 'evil-scroll-up)

  (define-key evil-normal-state-map "u" 'undo-tree-undo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)

  (define-key evil-normal-state-map (kbd "M-t") 'neotree-toggle)
  (define-key evil-normal-state-map (kbd "<C-return>") 'shr-browse-url)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  (define-key evil-normal-state-map (kbd "C-=") 'text-scale-increase)
  (define-key evil-normal-state-map (kbd "C--") 'text-scale-decrease)
  (define-key evil-normal-state-map (kbd "C-0") 'text-scale-adjust)

  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

  (defun my/c-c ()
    (interactive)
    (setq unread-command-events (listify-key-sequence (kbd "C-c"))))

  (defun my/c-k ()
    (interactive)
    (setq unread-command-events (listify-key-sequence (kbd "C-k"))))

  (evil-define-key 'normal global-map (kbd ",c") 'my/c-c)
  (evil-define-key 'normal global-map (kbd ",x") 'my/c-k)
#+END_SRC

*** Miscellaneous settings

**** Cursor shapes

Set the cursor shape for different evil states.
     
#+BEGIN_SRC emacs-lisp
  (set-default 'evil-normal-state-cursor 'hbar)
  (set-default 'evil-insert-state-cursor 'bar)
  (set-default 'evil-visual-state-cursor 'hbar)
  (set-default 'evil-motion-state-cursor 'box)
  (set-default 'evil-replace-state-cursor 'box)
  (set-default 'evil-operator-state-cursor 'hbar)
  (set-cursor-color "#80D1FF")
  (setq-default cursor-type 'bar) 
#+END_SRC

**** Small additions

We want /some/ Emacs in evil, so we change a few settings here.

#+BEGIN_SRC emacs-lisp
  (setq evil-cross-lines t
        evil-move-beyond-eol t
        evil-symbol-word-search t
        evil-want-Y-yank-to-eol t
        evil-cross-lines t)
#+END_SRC

** Which-key

We install which-key in case we ever forget any keybinds.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.1))
#+END_SRC

** Vertico

Vertico helps with better completion and to replace the default M-x. Consult adds a few things. Orderless adds fuzzy findings, marginalia adds stuff to your minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package consult)

  (use-package vertico
    :init (vertico-mode 1)
    :config
    (setq vertico-resize nil
          vertico-count 17
          vertico-cycle t))

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :init (marginalia-mode))
#+END_SRC

** Dashboard

The default startup screen is bland, let's replace it with a simplistic dashboard, made by me.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard)

  (dashboard-setup-startup-hook)

  (setq dashboard-center-content t
    dashboard-show-shortcuts nil
    dashboard-startup-banner "~/.config/emacs/banner.png"
    dashboard-set-heading-icons t
    dashboard-set-file-icons t
    dashboard-set-navigator t)
  (setq dashboard-items 'nil)
  (setq dashboard-init-info "Welcome to the (lisp) machine")
  (setq dashboard-footer 'nil)

  (defun dashboard-insert-info (list-size)
    (insert "Find file             SPC f f\nFind bookmarks        SPC f b\nFind recent files     SPC f r"))

  (add-to-list 'dashboard-item-generators '(info . dashboard-insert-info))
  (add-to-list 'dashboard-items '(info) t)

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Tabs

The centaur tabs package adds tabs to Emacs.

#+begin_src emacs-lisp 
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (special-mode . centaur-tabs-local-mode))
  (setq centaur-tabs-height 32
    centaur-tabs-gray-out-icons 'buffer
    centaur-tabs-set-modified-marker t
    centaur-tabs-set-icons t)
#+end_src

** File tree

Neotree is a cool file tree, so we install it. Although I usually use dired, neotree can be useful if you need a tree layout.

#+BEGIN_SRC emacs-lisp
  (use-package neotree)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (add-hook 'neotree-mode-hook
           (lambda ()
             (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
             (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
             (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
             (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
             (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
             (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
             (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
  (setq neo-window-fixed-size nil)
#+END_SRC

** Magit

Magit is the best git client, and it is a /must/. Less typing, less time spent using git, and more coding.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t)
#+END_SRC

** Parentheses

*** Smart parentheses
   
Most code editors automatically match parentheses, but Emacs doesn't do this, so we install a package.

#+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :config (smartparens-global-mode)
      (show-smartparens-mode))
#+END_SRC

*** Rainbow parentheses

Most editors also automatically color matching parentheses, but again, we need to install a package for this.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Icons

We need all-the-icons for some packages, so let's install it.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** Mode line

The default mode line is ugly, this package replaces it with one that looks like the doom mode line.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    (setq doom-modeline-height 30
      doom-modeline-bar-width 5
      doom-modeline-buffer-encoding 'nondefault
      doom-modeline-major-mode-icon t
      doom-modeline-icon t))

  (doom-modeline-def-modeline 'main
      '(bar " " matches buffer-info remote-host buffer-position parrot selection-info)
      '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs " " bar)) ; <-- added padding here

  (use-package hide-mode-line
    :hook
    (special-mode . hide-mode-line-mode)
    (neotree-mode . hide-mode-line-mode))
#+END_SRC

** Undo-tree

We want to visualize undo history better, so we install undo-tree.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo")))
#+END_SRC

** Formatter

Let's install a formatter to format our horrible code.

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :hook (prog-mode . format-all-mode))
#+END_SRC

** Colorscheme

My colorscheme uses doom-themes as a base, so we have to install it.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-quiet-dark t)
    (doom-themes-neotree-config))
#+END_SRC

** Mail

Emacs can do everything, including manage mail.

#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir (expand-file-name "~/Mail/"))

  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/Sent")
  (setq mu4e-trash-folder  "/Deleted")

  (setq mu4e-get-mail-command "mbsync -a"
    mu4e-view-prefer-html t
    mu4e-update-interval 180
    mu4e-headers-auto-update t
    mu4e-compose-signature-auto-include nil
    mu4e-compose-format-flowed t)

  (setq
   user-mail-address "mcotocel@outlook.com"
   user-full-name  "Matei Cotocel")

  (setq mu4e-view-show-images t)

  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-smtp-server "smtp-mail.outlook.com")
  (setq smtpmail-smtp-service 587 )
  (setq smtpmail-auth-credentials (expand-file-name "~/.authinfo"))
#+END_SRC

** Chat

*** Irc
   
It also has an IRC client available, so let's install and configure it.

#+BEGIN_SRC emacs-lisp
  (use-package circe)
  (setq circe-network-options
        `(("Libera Chat"
           :nick "Specter")))
  (setq enable-circe-display-images t)
  (setq enable-circe-color-nicks t)
  (add-hook 'circe-chat-mode-hook 'my-circe-prompt)
  (defun my-circe-prompt ()
    (lui-set-prompt
     (concat (propertize (concat (buffer-name) ">")
                         'face 'circe-prompt-face)
             " ")))
#+END_SRC

*** Matrix

I also install a matrix client.

#+begin_src emacs-lisp
  (straight-use-package 'matrix-client)
  (setq matrix-client-show-images t)
#+end_src

** RSS

I read RSS feeds, so we're going to configure a reader.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed)
  (setq elfeed-feeds
         '(("http://www.reddit.com/r/emacs.rss" tech)
           ("https://www.reddit.com/r/linux.rss" tech)
           ("https://nixers.net/syndication.php?fid=12,15&limit=25" tech)
           ("https://news.ycombinator.com/rss" tech)
           ("https://www.reddit.com/r/DigitalGardens.rss" note-taking)
           ("https://www.reddit.com/r/PKMS.rss" note-taking)
           ("http://www.reddit.com/r/terminal_porn.rss" tech)))
  (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
  (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
#+END_SRC

** EMMS

Why not listen to music in Emacs?

#+BEGIN_SRC emacs-lisp
  (use-package emms)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "/Volumes/PiNAS/Media/Music/")
#+END_SRC

** LSP

I use Emacs for coding as well, so we're going to configure lsp-mode.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    :hook ((python-mode . lsp)
           (lua-mode . lsp)
           (sh-mode . lsp)
           (lisp-mode . lsp)
           (css-mode . lsp)
           (html-mode . lsp)
           (json-mode . lsp)
           (markdown-mode . lsp)
           (latex-mode . lsp)
           (go-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config
    (setq lsp-enable-symbol-highlighting nil)
    lsp-ui-doc-enable t
    lsp-lens-enable nil
    lsp-headerline-breadcrumb-enable nil
    lsp-ui-sideline-enable nil
    lsp-ui-sideline-enable t
    lsp-modeline-code-actions-enable t
    lsp-ui-sideline-enable t
    lsp-ui-doc-border nil
    lsp-eldoc-enable-hover t)
  (setq lsp-log-io nil)
  (setq lsp-enable-file-watchers nil)

  (use-package lsp-ui :commands lsp-ui-mode)

  (setq lsp-enable-symbol-highlighting nil)
  (custom-set-faces '(nobreak-space ((t nil))))

  (use-package company
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-select-next)))

  (setq company-idle-delay 0.1
        company-minimum-prefix-length 1
        company-selection-wrap-around t
        company-require-match 'never
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case t
        company-dabbrev-other-buffers nil
        company-tooltip-limit 5
        company-tooltip-minimum-width 50)

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-scrollbar nil))

  (use-package go-mode)
  (use-package json-mode)
  (use-package lua-mode)
  (use-package lsp-jedi
    :hook (python-mode . lsp-jedi))

  (use-package yasnippet
    :hook (prog-mode . yas-global-mode))

  (use-package yasnippet-snippets
    :defer t)

  (use-package lsp-ivy)
#+END_SRC

** Debugger

Here we use the RealGUD package as a debugger.

#+begin_src emacs-lisp
  (use-package realgud)
#+end_src

** Flycheck

Syntax checking for code.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** Projectile

Here, we install and configure projectile, which is a project interaction library.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config (projectile-mode 1))
#+END_SRC

* Org mode

** Files locations
  
We want to save everything in /one/ location.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Org/"
        org-default-notes-file "~/Org/notes.org")
  (setq org-agenda-files '("~/Org/"))
#+END_SRC

** Exporting

Let's set the export backends to things I commonly use, along with some extra settings for html exports.

#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(latex md html))

  (require 'org)
  (require 'ox-latex)
  (require 'ox-man)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted) 

  (use-package htmlize)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (setq org-src-fontify-natively t)

  (setq org-export-with-section-numbers nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (latex . t)))
  (setq org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"/>"
    org-html-doctype "html5")
#+END_SRC

** Bullets

Package that makes the bullets look nicer

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

** UI

A few additions to make everything look neater

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (setq org-image-actual-width '(300))
  (set-face-attribute 'org-headline-done nil :strike-through t)
  (setq org-agenda-start-on-weekday 0)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Keywords

Let's add our own custom keywords and highlight them

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
       '((sequence "TODO" "WAITING" "PAUSED" "ALMOST" "OPTIONAL" "IMPORTANT" "DONE")))
  (setq org-todo-keyword-faces
    '(("TODO"      . (:foreground "#FF8080" :weight bold))
      ("WAITING"   . (:foreground "#FFFE80" :weight bold))
      ("PAUSED"    . (:foreground "#D5D5D5" :weight bold))
      ("ALMOST"    . (:foreground "#80D1FF" :weight bold))
      ("OPTIONAL"  . (:foreground "#C780FF" :weight bold))
      ("IMPORTANT" . (:foreground "#80FFE4" :weight bold))
      ("DONE"      . (:foreground "#97D59B" :weight bold))))
#+END_SRC

** Org roam

Org roam makes Org even better

#+BEGIN_SRC emacs-lisp
  (setq org-roam-v2-ack t)

  (use-package org-roam
    :custom
    (org-roam-directory "~/Org/")
    :config
    (org-roam-setup))

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start 'nil))
#+END_SRC

** Org capture

We also add some templates for Org capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      '(("t" "Todo" entry (file "~/Org/Refile.org")
         "* TODO %?\n%U" :empty-lines 1)
        ("n" "Note" entry (file "~/Org/Refile.org")
         "* NOTE %?\n%U" :empty-lines 1)))
#+END_SRC

** Babel

*** Go support

Go support for babel

#+begin_src emacs-lisp
  (use-package ob-go
    :config (org-babel-do-load-languages
   'org-babel-load-languages
   '((go . t))))
#+end_src

** Present

Make presentations with org mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-present)
#+END_SRC

* Functions

** Edit file as root
  
Edit the current file as root.

#+BEGIN_SRC emacs-lisp
  (defun edit-file-root ()
    "Use tramp to edit the current buffer as root"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))
#+END_SRC

** Switch to scratch

Switch to the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (defun switch-to-scratch ()
    "Switch to the scratch buffer"
    (interactive)
    (switch-to-buffer "*scratch*"))
#+END_SRC

* Other

** Kill opened org files

Org agenda has a nasty habit of keeping org files open after closing it. We fix that here.

#+begin_src emacs-lisp 
  (add-hook 'org-agenda-mode-hook
              (lambda ()
                (local-set-key (kbd "q") 'org-agenda-exit)))
#+end_src
