#+TITLE: Emacs config
#+AUTHOR: Matei Cotocel

* Packages
** Setup melpa

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))
#+END_SRC

** Initalize use-package

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  (setq use-package-always-ensure t)
#+END_SRC

** Which-key for keybinding help

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.05))
#+END_SRC

** Fast terminal for emacs

#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC

** File tree in sidebar

#+BEGIN_SRC emacs-lisp
  (use-package neotree)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

** Git client for emacs

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Smart parentheses

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
      :config (smartparens-global-mode))
#+END_SRC

** Vi emulation layer for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config (evil-mode))
#+END_SRC

** Helm, a framework for completion

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish
    :config
    (helm-mode t))
#+END_SRC

** Flx-based fuzzy sorting for Helm

#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package helm-flx
    :config
    (helm-flx-mode t))
#+END_SRC

** Startup dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/Pictures/pfp_rounded_small.png")
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t))
#+END_SRC

** Atom One Dark Theme

#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme
    :config
    (load-theme 'atom-one-dark t))
#+END_SRC

** Nice icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** Leader for evil mode

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'helm-M-x
      "g" 'magit))
#+END_SRC

** Doom-style modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 30)
    (setq doom-modeline-bar-width 1))
#+END_SRC

** Sleek tabs for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-headline-match)
    (setq centaur-tabs-style "bar")
    (setq centaur-tabs-height 32)
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-set-bar 'left)
    (setq centaur-tabs-set-modified-marker t)
    (centaur-tabs-change-fonts "Iosevka Nerd Font" 100)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+END_SRC

** Format code in buffer

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :config
    (format-all-mode 1)
    (add-hook 'prog-mode-hook 'format-all-mode))
#+END_SRC

** Visualize undo history

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC

** Rainbow brackets

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Programming
** lsp-jedi for Python

#+BEGIN_SRC emacs-lisp
  (use-package lsp-jedi)
#+END_SRC

** Lua mode for Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
#+END_SRC

** Enable lsp for certain major modes

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    :hook (
           (python-mode . lsp)
           (lua-mode . lsp)
           (sh-mode . lsp)
           (lisp-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+END_SRC

** lsp ui config

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui :commands lsp-ui-mode)

  (setq lsp-enable-symbol-highlighting nil)
  (custom-set-faces '(nobreak-space ((t nil))))
#+END_SRC

** lsp extension for Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package dap-mode)
#+END_SRC

** Completion with company and lsp

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook
    (after-init . global-company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-select-next-or-abort)))
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 1
        company-selection-wrap-around t
        company-require-match 'never
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case t
        company-dabbrev-other-buffers nil)

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

* General config
** Git username and email

#+BEGIN_SRC emacs-lisp
  (when (equal ""
               (shell-command-to-string "git config user.name"))
    (shell-command "git config --global user.name \"MCotocel\"")
    (shell-command "git config --global user.email \"mcotocel@outlook.com\""))
#+END_SRC

** UI changes

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t
        inhibit-startup-echo-area-message t
        inhibit-startup-message t)
#+END_SRC

** Hide line numbers for certain modes

#+BEGIN_SRC emacs-lisp
   (dolist (mode '(org-mode-hook
                   term-mode-hook
                   vterm-mode-hook
                   eshell-mode-hook
                   treemacs-mode-hook
                   neotree-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Disable bell
   
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Performance improvements
   
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

** Helm default sources

#+BEGIN_SRC emacs-lisp
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))
#+END_SRC

** Helm config

#+BEGIN_SRC emacs-lisp
  (setq helm-ff-ido-style-backspace 'always
        helm-ff-auto-update-initial-value t
        helm-ff--auto-update-state t)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (setq delete-old-versions t)
  (setq kept-old-versions 15)
  (setq vc-make-backup-files t)
  (setq version-control t)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font "Iosevka Nerd Font-11" nil t)
#+END_SRC

** Keybinds

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "M-s") 'save-buffer)
  (define-key evil-normal-state-map (kbd "M-q") 'kill-current-buffer)
  (define-key evil-normal-state-map (kbd "M-w") 'delete-window)
  (define-key evil-normal-state-map (kbd "M-x") 'helm-M-x)
  (define-key evil-normal-state-map (kbd "M-/") 'helm-find-files)
  (define-key evil-normal-state-map (kbd "<C-tab>") 'helm-mini)
  (define-key evil-normal-state-map (kbd "M-u") 'helm-show-kill-ring)
  (define-key evil-normal-state-map (kbd "<C-return>") 'shell-pop)
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "M-j") 'evil-scroll-down)
  (define-key evil-normal-state-map (kbd "M-k") 'evil-scroll-up)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
  (define-key evil-normal-state-map (kbd "M-t") 'neotree-toggle)
  (define-key evil-normal-state-map "u" 'undo-tree-undo)
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC

** Line wrapping

#+BEGIN_SRC emacs-lisp
  (visual-line-mode 1)
#+END_SRC

** Add newline at end of file

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** Cursor settings

#+BEGIN_SRC emacs-lisp
  (set-default 'evil-normal-state-cursor 'hbar)
  (set-default 'evil-insert-state-cursor 'bar)
  (set-default 'evil-visual-state-cursor 'hbar)
  (set-default 'evil-motion-state-cursor 'box)
  (set-default 'evil-replace-state-cursor 'box)
  (set-default 'evil-operator-state-cursor 'hbar)
  (set-cursor-color "#80D1FF")
#+END_SRC

** Emacs-like Evil motions

#+BEGIN_SRC emacs-lisp
  (setq evil-cross-lines t
        evil-move-beyond-eol t
        evil-want-fine-undo t
        evil-symbol-word-search t)
#+END_SRC

** Yank to EOL with Evil

#+BEGIN_SRC emacs-lisp
  (setq evil-want-Y-yank-to-eol t)
#+END_SRC

** Display relative line numers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+END_SRC

** Padding around edge

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'internal-border-width 40)
#+END_SRC

** Use Y or N for prompts

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Save customize buffer customizations in a seperate file

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.config/emacs/etc/custom.el")
#+END_SRC

** Settings for scroll

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 10
        scroll-preserve-screen-position t)
#+END_SRC

** Tab configuration

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+END_SRC

** Disable all disabled commands

#+BEGIN_SRC emacs-lisp
  (setq disabled-command-function nil)
#+END_SRC

** Set recentf history file location

#+BEGIN_SRC emacs-lisp
  (setq recentf-save-file "~/.config/emacs/etc/recentf"
        recentf-max-saved-items 50)
#+END_SRC

** Set history file location

#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.config/emacs/etc/savehist"
        history-length 150)
#+END_SRC

** Set line history file location

#+BEGIN_SRC emacs-lisp
  (setq save-place-file "~/.config/emacs/etc/saveplace")
#+END_SRC

** Set bookmark file location

#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file "~/.config/emacs/etc/bookmarks")
#+END_SRC

** Set default shell

#+BEGIN_SRC emacs-lisp
  (setq sh-shell-file "/usr/bin/bash")
#+END_SRC

** Make PKGBUILD files register as shell script

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+END_SRC

* Org mode
** Set Org files location

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org/"
        org-default-notes-file "~/org/notes.org")
#+END_SRC

** Org export to file formats

#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(latex md))
#+END_SRC

** Center Org buffers

#+BEGIN_SRC emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+END_SRC

** Nicer Org mode bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
